线程池
    1.为什么使用线程池？
	  当并发的线程数量很多，且每个线程都是执行一个时间很短的任务就结束了，这样频繁的创建和销毁降低了系统的效率。
	  线程池使得线程可以复用，线程执行完任务后，不是被销毁，而是继续执行其他任务。
	  
	2.java中的ThreadPoolExecutor
	  （1）ThreadPoolExecutor是java线程池中最核心的类
	         具体实现源码：
    public class ThreadPoolExecutor extends AbstractExecutorService {

    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,
            BlockingQueue<Runnable> workQueue);
 
    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,
            BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory);
 
    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,
            BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler);
 
    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,
        BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);

}
             由代码可知，ThreadPoolExcutor继承了AbstractExcutorService类，并提供了四个构造器，前三个构造器都是调用第四个构造器进行初始化工作。
			 
	  （2）构造器中，各参数含义：
          	 corePoolSize：1.核心池大小，即在没有任务执行时的线程池大小，默认情况下，在创建了线程池后，线程池中的线程数为0，有任务来之后，
			                 就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放入缓存队列。
						   2.在刚刚创建ThreadPoolExcutor的时候，线程池中没有任何线程，等有任务来的时候才去创建线程执行任务。除非调用了
						      prestartAllcoreThreads()或prestartCoreThread(),这两个方法是预创建线程的意思。也就是说调用了预创建线程方法后，
							  在没有任务到来的时候，线程池里有corePoolSize个线程或1个线程。
							  
			 maximumPoolSize：线程池最大线程数，线程池中最多能创建多少线程。
			 
			 KeepAliveTime：1.表示线程没有任务执行时，多长时间会终止，默认情况下，只有当线程池中的线程数大于了corePoolSize，KeepAliveTime才会起作用。
			                  直到线程池中的线程数小于corePoolSize。即当线程池中的线程数大于corePoolSize时，如果一个线程的空闲时间达到了KeepAliveTime,则终止。
							  直到线程池中的线程数不超过corePoolSize。
	                        2.如果调用了allowCoreThreadTimeOut(boolean)方法，即使线程池中的线程数不大于corePoolSize，KeepAliveTime也会起作用。直到线程池中的
							  线程数为0。
					
		     unit： 参数KeepAliveTime的时间单位，有7种取值，在TimeUnit中有7种静态属性
			        TimeUnit.DAYS         天
					TimeUnit.HOURS        小时
					TimeUnit.MINUTES      分钟
					TimeUnit.SECONDS      秒
					TimeUnit.MILLISECONDS 毫秒
					TimeUnit.MICROSECONDS 微秒
					TimeUnit.NANOSECONDS  纳秒
					    
             workQueue：阻塞队列，用来存储等待执行的任务，一般来说，这里的阻塞队列有以下选择
                        1.ArrayBlockQuene
                        2.LinkedBlockQuene
                        3.SynchronousQuene
			            ArrayBlockQuene和SynchronousQuene使用较少，一般用用LinkedBlockQuene和Synchronous。线程池的排队策略与BlockQuene有关	

             threadFactory：线程工厂，主要用来创建线程。
           
             handler：表示拒绝处理任务时的策略，有以下四种取值：
                      1.ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 
                      2.ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 
                      3.ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）
                      3.ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 


            从源码可以看出，ThreadPoolExcutor继承了AbstractExcutorService,AbstractExcutorService是一个抽象类，它继承了ExcutorService接口，而ExcutorService
            继承了Excutor接口。具体源码见 https://www.cnblogs.com/dolphin0520/p/3932921.html	

            Excutor接口源码分析：
                public interface Executor {
                       void execute(Runnable command);
                }			
			Executor是一个顶层接口，它只声明了一个方法，excutor(Runnable),返回值为void，参数类型为Runnable类型，从字面意思可以理解，就是用来执行传进去的任务的。
			
			然后，ExcutorService接口继承了Excutor接口，并声明了一些方法，submit，invokeAll，invokeAny，及shutdown等
			
			抽象类AbstractExcutorService实现了ExcutorService，基本实现了ExcutorService的所有方法。
			
			然后，ThreadPoolExcutor继承了抽象类AbstractExcutorService
			
			在ThreadPoolExecutor类中有几个非常重要的方法：
            execute()
            submit()
            shutdown()
            shutdownNow()
			
			execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向
			线程池提交一个任务，交由线程池去执行。

　　        submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方
            法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，
		    只不过它利用了Future来获取任务执行结果（Future相关内容将在下一篇讲述）。

　　        shutdown()和shutdownNow()是用来关闭线程池的。

　　        还有很多其他的方法：

　　        比如：getQueue() 、getPoolSize() 、getActiveCount()、getCompletedTaskCount()等获取与线程池相关属性的方法			
